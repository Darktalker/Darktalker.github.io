<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Just A Blog</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-01-06T06:48:52.801Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Hang Gao</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JavaSE 第二章 Java面向对象编程</title>
    <link href="http://example.com/2022/01/06/JavaSE-%E7%AC%AC%E4%BA%8C%E7%AB%A0-Java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/"/>
    <id>http://example.com/2022/01/06/JavaSE-%E7%AC%AC%E4%BA%8C%E7%AB%A0-Java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/</id>
    <published>2022-01-06T06:48:14.000Z</published>
    <updated>2022-01-06T06:48:52.801Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-面向对象的概念"><a href="#1-面向对象的概念" class="headerlink" title="1-面向对象的概念"></a>1-面向对象的概念</h1><h2 id="1-类与实例"><a href="#1-类与实例" class="headerlink" title="1.类与实例"></a>1.类与实例</h2><h3 id="对象的概念"><a href="#对象的概念" class="headerlink" title="对象的概念"></a>对象的概念</h3><p>类/class 抽象的<br>(人)<br>实例/instance 具体的<br>(小明、小红、小军)<br>​</p><p>class是对象的模板，class实现了数据封装，包含多个field，定义了类的特征。<br>new操作符创建一个类<br>​</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>class和instance是模板和实例的关系</li><li>class是数据类型，instance是数据</li><li>class定义了field，每个instance都有自己的field</li><li>变量指向instance并通过变量.字段名访问field</li><li>指向instance的变量都是引用变量</li></ul><p>​</p><h1 id="2-数据封装"><a href="#2-数据封装" class="headerlink" title="2-数据封装"></a>2-数据封装</h1><h2 id="1-方法"><a href="#1-方法" class="headerlink" title="1.方法"></a>1.方法</h2><h3 id="数据封装"><a href="#数据封装" class="headerlink" title="数据封装"></a>数据封装</h3><ul><li>外部代码通过调用public访问数据破坏了封装性</li><li>private封装数据保护数据</li><li>public定义访问方法</li></ul><p>​</p><h3 id="定义方法"><a href="#定义方法" class="headerlink" title="定义方法"></a>定义方法</h3><ul><li>方法定义：public、返回值、名称、参数列表</li><li>方法内部用隐式变量this，不引起歧义的情况下可以省略this</li><li>外部代码不可访问private</li><li>内部代码可以调用自己的private方法</li></ul><p>​</p><h2 id="2-构造方法"><a href="#2-构造方法" class="headerlink" title="2.构造方法"></a>2.构造方法</h2><p>如果一个类没定义构造方法，编译器会定义一个默认的构造方法，但是没有任何初始化操作。<br>类内部调用构造方法用this()<br>​</p><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><ul><li>实例在创建时会调用构造方法</li><li>构造方法用于初始化实例</li><li>没有定义构造方法时，编译器会自动创建默认的构造方法</li><li>可以定义多个构造方法，编译器会根据参数自动判断，但是不能有歧义</li></ul><p>​</p><h2 id="3-方法重载"><a href="#3-方法重载" class="headerlink" title="3.方法重载"></a>3.方法重载</h2><p>多个方法方法名不同但是参数不同：</p><ul><li>参数个数不同；</li><li>参数类型不同；</li><li>参数位置不同；</li></ul><p>​</p><h1 id="3-继承和多态"><a href="#3-继承和多态" class="headerlink" title="3-继承和多态"></a>3-继承和多态</h1><h2 id="1-继承"><a href="#1-继承" class="headerlink" title="1.继承"></a>1.继承</h2><p>继承是一种代码复用的方式。<br>例如Student和Person，二者重复了很多字段。可以采用继承</p><ul><li>Student可以从Person继承；</li><li>继承使用关键字extends；</li><li>Student获得了Person的所有功能；</li><li>Student只需要编写新增功能；</li></ul><p>​</p><p>Person是超类（super）父类<br>Student是子类<br>​</p><p>Object是所有类的父类,Object-&gt;Person-&gt;Student<br>​</p><p>Java只允许继承一个类<br>​</p><h3 id="protected"><a href="#protected" class="headerlink" title="protected"></a>protected</h3><p>Person类的private字段无法被子类访问。用protected修饰的字段可以被子类访问。protected把字段和方法的访问权限控制在继承树内部。</p><h3 id="super"><a href="#super" class="headerlink" title="super"></a>super</h3><ul><li>super关键字表示父类</li><li>构造方法的第一行语句必须调用super()</li><li>没有super()时编译器会自动生成super()</li><li>如果父类没有默认构造方法，子类就必须显式调用super()</li></ul><p>​</p><p>​</p><h3 id="向上转型"><a href="#向上转型" class="headerlink" title="向上转型"></a>向上转型</h3><p>可以对实例变量进行向上转型(upcasting)。<br>向上转型可以把一个子类型安全地转变为更加抽象的类型。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Person p = <span class="keyword">new</span> <span class="built_in">Person</span>();</span><br><span class="line">Student st = <span class="keyword">new</span> <span class="built_in">Student</span>();</span><br><span class="line"></span><br><span class="line">Person ps = <span class="keyword">new</span> <span class="built_in">Student</span>();</span><br><span class="line">Object o1 = p;</span><br><span class="line">Object o2 = s;</span><br></pre></td></tr></table></figure><p>可以对实例变量进行向下转型(downcasting)<br>向下转型把抽象的类型变成一个具体的子类型<br>向下转型很可能会报错: ClassCastException</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Person p = <span class="keyword">new</span> <span class="built_in">Person</span>();</span><br><span class="line">Student s = (Student) p;</span><br></pre></td></tr></table></figure><p>instanceof操作符可以判断对象的类型</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Person p = <span class="keyword">new</span> <span class="built_in">Person</span>();</span><br><span class="line">System.out.<span class="built_in">println</span>(p instanceof Person);  <span class="comment">// true</span></span><br><span class="line">System.out.<span class="built_in">println</span>(p instanceof Student);  <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">Student s = <span class="keyword">new</span> <span class="built_in">Student</span>();</span><br><span class="line">System.out.<span class="built_in">println</span>(p instanceof Person);  <span class="comment">// true</span></span><br><span class="line">System.out.<span class="built_in">println</span>(p instanceof Student);  <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">Student n  = null;</span><br><span class="line">System.out.<span class="built_in">println</span>(n instanceof Student);  <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>向下转型前可以用instanceof判断</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Person p = <span class="keyword">new</span> <span class="built_in">Student</span>();</span><br><span class="line"><span class="keyword">if</span> (p instanceof Student) &#123;</span><br><span class="line">Student s = (Student) p; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​</p><p>​</p><h2 id="2-多态"><a href="#2-多态" class="headerlink" title="2.多态"></a>2.多态</h2><h3 id="Override"><a href="#Override" class="headerlink" title="Override"></a>Override</h3><ul><li>子类覆写父类的方法是覆写Override</li><li>方法签名如果不同就不是Override而是创建一个新方法。</li><li>加上@Override可以让编译器帮助检查是否进行了正确的复写</li><li>@Override不是必须的</li><li>引用变量的声明类型可能与其实际类型不符</li><li>实例对象的方法调用总是对应实际类型</li><li>Java实例方法调用是基于运行时实际类型的动态调用</li></ul><p>​</p><h3 id="多态Polymorphic"><a href="#多态Polymorphic" class="headerlink" title="多态Polymorphic"></a>多态Polymorphic</h3><ul><li>无法知道调用的是Person类定义的run()方法</li><li>多态是指针对某个类型的方法调用，其真正执行的方法取决于运行时期实际类型的方法。</li><li>对某个类型调用某个方法，执行的方法可能是某个子类的复写方法。</li><li>利用多态，允许添加更多类型的子类实现功能扩展。</li></ul><p>​</p><p>Object定义的几个重要方法：<br>toString: 把instance输出为String<br>equals: 判断两个instance 是否逻辑相等<br>hashCode: 计算一个instance 的哈希值<br>​</p><h3 id="final"><a href="#final" class="headerlink" title="final"></a>final</h3><ul><li>用final修饰的方法不能被Override</li><li>用final修饰的类不能被继承</li><li>用final修饰的字段在初始化后不能被修改</li></ul><h1 id="4-抽象类和接口"><a href="#4-抽象类和接口" class="headerlink" title="4-抽象类和接口"></a>4-抽象类和接口</h1><h2 id="1-抽象类"><a href="#1-抽象类" class="headerlink" title="1.抽象类"></a>1.抽象类</h2><p>若父类方法没有实际意义，可以去掉方法的执行语句<br>可以把父类的方法声明为抽象方法<br>​</p><p>如果一个class定义了方法，但是没有具体执行代码，这个方法就是抽象方法。</p><ul><li>抽象方法用abstract修饰</li><li>抽象方法没有任何执行语句</li><li>因为无法执行抽象方法，这个类也必须声明未抽象类</li><li>无法实例化一个抽象类</li></ul><p>​</p><p>无法被实例化的抽象类有什么用：</p><ul><li>抽象类用于被继承</li><li>抽象类可以强迫子类实现其定义的抽象方法</li><li>抽象方法实际上相当于定义了“规范”</li></ul><p>面相抽象编程的本质：</p><ul><li>上层代码只定义规范</li><li>不需要子类就可以实现业务逻辑</li><li>具体的业务逻辑由不同的子类实现，调用者并不关心</li></ul><h2 id="2-接口"><a href="#2-接口" class="headerlink" title="2.接口"></a>2.接口</h2><p>抽象类的本质是面向接口<br>如果一个抽象类没有字段，所有方法全部都是抽象方法，就可以把该抽象类改写为接口。</p><ul><li>使用interface声明一个接口</li><li>接口定义的方法默认是public abstract</li></ul><p>​</p><p>interface是Java内置的纯抽象接口</p><ul><li>实现interface使用implements</li><li>可以实现多个interface</li></ul><p>注意区分术语：</p><ul><li>Java接口特指interface定义的接口，只定义方法签名</li><li>编程接口泛指接口规范，如方法签名、数据格式、网络协议等</li></ul><p>​</p><p>抽象类 vs. 接口</p><table><thead><tr><th></th><th>abstract class</th><th>interface</th></tr></thead><tbody><tr><td>继承</td><td>只能extends一个class</td><td>可以implements多个interface</td></tr><tr><td>字段</td><td>可以定义实例字段</td><td>不能定义实例字段</td></tr><tr><td>抽象方法</td><td>可以定义抽象方法</td><td>可以定义抽象方法</td></tr><tr><td>非抽象方法</td><td>可以定义非抽象方法</td><td>可以定义default方法</td></tr></tbody></table><p>​</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> interface Shape &#123;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">area</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">// default定义一个默认方法</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">double</span> <span class="title">perimeter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>一个interface可以继承另一个interface</li><li>interface继承自interface使用extends</li><li>相当于拓展了接口的方法</li></ul><p>​</p><p>合理设计interface和abstract class的继承关系</p><ul><li>公共逻辑放在abstract class中</li><li>接口层次代表抽象程度</li></ul><p>​</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/12519800/1640594628847-9a85fce0-2e12-41ba-b8b8-920b888124bc.png#clientId=u516bc740-307b-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=164&id=u885258fd&margin=%5Bobject%20Object%5D&name=image.png&originHeight=328&originWidth=419&originalType=binary&ratio=1&rotation=0&showTitle=false&size=39193&status=done&style=none&taskId=u3d87c9b1-d47e-411d-8bff-f1c8d5c6061&title=&width=209.5" alt="image.png"><br>​</p><h3 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h3><ul><li>接口定义了纯抽象规范</li><li>类可以实现多个接口</li><li>接口也是数据类型，适用于向上转型和向下转型</li><li>接口不能定义实例字段</li><li>接口可以定义default方法 JDK&gt;=1.8</li></ul><h1 id="5-包和classpath"><a href="#5-包和classpath" class="headerlink" title="5-包和classpath"></a>5-包和classpath</h1><h2 id="1-静态字段和方法"><a href="#1-静态字段和方法" class="headerlink" title="1.静态字段和方法"></a>1.静态字段和方法</h2><p>用static修饰的字段称为静态字段</p><ul><li>普通字段在每个实例中都有自己的一个独立空间</li><li>静态字段只有一个共享的空间。所有实例都共享该字段。</li></ul><ul><li>所有实例共享一个静态字段</li><li>不推荐用实例变量访问静态字段</li><li>推荐用类名访问静态字段</li><li>可以把静态字段理解为class本身的字段</li></ul><p>用static修饰的方法称为静态方法</p><ul><li>调用实例方法必须通过实例变量</li><li>调用静态方法不需要实例变量</li><li>静态方法类似于其他编程语言的函数</li></ul><ul><li>静态方法不能访问this变量</li><li>静态方法不能访问实例字段</li><li>静态方法可以访问静态字段</li></ul><h3 id="总结-3"><a href="#总结-3" class="headerlink" title="总结"></a>总结</h3><p>静态字段属于所有实例共享的字段，实际上属于class字段<br>调用静态方法不需要实例，因此无法访问this<br>静态方法可以访问静态字段和其他静态方法<br>静态方法常用于工具类和辅助方法。</p><h2 id="2-包"><a href="#2-包" class="headerlink" title="2.包"></a>2.包</h2><p>如何解决类名冲突？<br>使用package<br>Java定义了名字空间：包<br>包名+类名=完整类名</p><ul><li>小明的Person类 xiaoming.Person</li><li>小红的Person类 xiaohong.Person</li></ul><p>​</p><ul><li>小军的Arrays类 xiaojun.Arrays</li><li>JDK的Arrays类 java.util.Arrays</li></ul><p>包可以是多层次的<br>java.util.Arrays<br>包没有父子关系<br>java.util和java.util.zip是不同的包，两者没有关系</p><p>JVM加载class并执行代码时，总是使用class的完整类名</p><h3 id="包作用域"><a href="#包作用域" class="headerlink" title="包作用域"></a>包作用域</h3><p>位于同一个包的类，可以访问包作用域的字段和方法：<br>不用public protected private 修饰的字段和方法就是包作用域<br>​</p><p>引用其他类的方法：</p><ul><li>使用完整类名 java.util.Arrays.sort</li><li>先import 再使用类名</li><li>可以使用*但是不推荐</li></ul><p>​</p><h2 id="3-作用域"><a href="#3-作用域" class="headerlink" title="3.作用域"></a>3.作用域</h2><p>Java的类、接口、字段、方法都可以设置访问权限</p><ul><li>访问权限是指在一个类内部，能否引用另一个类以及访问它的字段和方法</li><li>访问权限由public  protected private package四种</li></ul><p>​</p><p>​</p><h3 id="public"><a href="#public" class="headerlink" title="public"></a>public</h3><p>定义为public的field、method可以被其他类访问</p><h3 id="private"><a href="#private" class="headerlink" title="private"></a>private</h3><p>定义为private的field method无法被其他类访问<br>private访问权限限定在class内部，与方法声明的顺序无关<br>定义在一个class内部的class称为内部类(inner class)<br>​</p><h3 id="protected-1"><a href="#protected-1" class="headerlink" title="protected"></a>protected</h3><p>protected作用于继承关系<br>定义未protected的字段和方法可以被子类访问</p><h3 id="package"><a href="#package" class="headerlink" title="package"></a>package</h3><p>包作用域指的是一个类允许访问同一个package的</p><ul><li>没有public、private修饰的class</li><li>没有public、protected、private修饰的字段和方法</li><li>包名必须完全一致</li></ul><p>​</p><h3 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h3><ul><li>在方法内部定义的变量称为局部变量</li><li>局部变量作用域从变量声明处开始到对应的块结束</li></ul><h3 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h3><p>尽可能把局部变量的作用域缩小<br>尽可能延后声明局部变量<br>​</p><h3 id="final-1"><a href="#final-1" class="headerlink" title="final"></a>final</h3><p>final与访问权限不冲突<br>final修饰class可以阻止被继承<br>final修饰method可以阻止被覆写<br>final修饰field可以阻止被重新赋值<br>final修饰局部变量可以阻止被重新赋值</p><h2 id="4-classpath"><a href="#4-classpath" class="headerlink" title="4.classpath"></a>4.classpath</h2><h3 id="classpath"><a href="#classpath" class="headerlink" title="classpath"></a>classpath</h3><ul><li>classpath是一个环境变量</li><li>classpath指示JVM如何搜索class</li><li>classpath设置的搜索路径与操作系统相关<ul><li>C:\work\project1\bin; C:\shared; “D:\My Document\project2\bin”</li><li>/usr/shared:/usr/local/bin:/home/user/bin</li></ul></li></ul><p>classpath的设置方法：</p><ul><li>直接在系统环境中设置classpath环境变量（不推荐）</li><li>在启动JVM时设置classpath变量（推荐）<ul><li>java  -classpath C:\work\bin;C:\shared com.feiyangedu.Hello</li><li>java  -cp C:\work\bin;C:\shared com.feiyangedu.Hello</li></ul></li></ul><p>没有设置环境变量也没有-cp参数，默认的classpath为当前目录<br>​</p><h3 id="Jar包"><a href="#Jar包" class="headerlink" title="Jar包"></a>Jar包</h3><p>jar包是zip格式的压缩文件，包含若干.class文件<br>jar相当于目录<br>classpath可以包含jar文件<br>查找某一个类时也可以在jar内搜索<br>使用jar包可以避免大量的目录和.class文件<br>​</p><h3 id="如何创建Jar包"><a href="#如何创建Jar包" class="headerlink" title="如何创建Jar包"></a>如何创建Jar包</h3><p>使用JDK自带的jar包<br>使用maven等编译工具</p><h3 id="Jar包的其他功能"><a href="#Jar包的其他功能" class="headerlink" title="Jar包的其他功能"></a>Jar包的其他功能</h3><p>jar包可以包含一个特殊的/META-INF/MANIFEST.MF文件<br>MANIFEST.MF是纯文本，可以指定Main-Class和其他信息<br>jar包还可以包含其他jar包<br>​</p><h3 id="JDK的Class"><a href="#JDK的Class" class="headerlink" title="JDK的Class"></a>JDK的Class</h3><p>JVM运行的时候会自动加载JDK自带的class<br>JDK自带的class被打包在rt.jar<br>不需要在classpath中引用rt.jar<br>​</p><h1 id="6-Java核心类"><a href="#6-Java核心类" class="headerlink" title="6-Java核心类"></a>6-Java核心类</h1><h2 id="1-字符串和编码"><a href="#1-字符串和编码" class="headerlink" title="1.字符串和编码"></a>1.字符串和编码</h2><h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><p>String特点：</p><ul><li>不需要new直接双引号调用</li><li>内容不可变</li><li>比较String<ul><li>equals(Object)</li><li>equalsIgnoreCase(String)忽略大小写</li></ul></li><li>是否包含子串<ul><li>contains</li><li>indexOf</li><li>lastIndexOf</li><li>startsWith</li><li>endsWith</li></ul></li><li>trim()<ul><li>移出首尾空白字符</li><li>空格 \t \r \n</li><li>trim()不改变字符串内容而是返回新字符串</li></ul></li><li>提取子串<ul><li>subString</li></ul></li><li>大小写转换<ul><li>toUpCase</li><li>toLowCase</li></ul></li><li>替换子串<ul><li>replace(char,char)</li><li>replace(String, String)</li></ul></li><li>正则表达式替换子串<ul><li>replaceAll(String, String)</li></ul></li><li>分割字符串<ul><li>split</li></ul></li><li>拼接字符串<ul><li>join</li></ul></li><li>任意数据转换为String<ul><li>valueOf</li></ul></li><li>把String转化为其他类型<ul><li>Integer.parseInt</li><li>Integer.valueOf</li><li>注意: Integer.getValue不是转换字符串而是查找环境变量</li></ul></li><li>String转化为char[]<ul><li>char[] toCharArray()</li></ul></li><li>char[]转换为String<ul><li>new String(char[])</li></ul></li><li>String转换为byte[]<ul><li>byte[] getBytes() 不推荐</li><li>byte[] getBytes(String)</li><li>byte[] getBytes(Charset)</li></ul></li><li>byte[]转换为String<ul><li>new String(byte[], String)</li><li>new String(byte[], Charset)</li></ul></li></ul><p>​</p><h3 id="编码最佳实践"><a href="#编码最佳实践" class="headerlink" title="编码最佳实践"></a>编码最佳实践</h3><ul><li>Java使用Unicode编码</li><li>Java程序运行时使用Unicode编码</li><li>输入输出时把String和byte[]转换，需要考虑编码</li><li>始终优先考虑UTF-8编码</li></ul><p>​</p><p>​</p><h2 id="2-StringBuilder类"><a href="#2-StringBuilder类" class="headerlink" title="2.StringBuilder类"></a>2.StringBuilder类</h2><h3 id="StringBuilder"><a href="#StringBuilder" class="headerlink" title="StringBuilder"></a>StringBuilder</h3><p>String可以用+拼接</p><ul><li>每次循环都会创建新的字符串对象</li><li>绝大部分是临时对象，浪费内存</li><li>影响GC效率</li></ul><p>​</p><p>StringBuilder可以高效拼接字符串</p><ul><li>StringBuilder是可变对象</li><li>StringBuilder可以预分配缓冲区</li></ul><p>​</p><p>StringBuilder可以进行 链式操作 append insert toString<br>​</p><p>不需要特别改写字符串+操作</p><ul><li>编译器在内部自动把多个连续的+操作优化未StringBuilder操作</li></ul><h3 id="StringBuilder-VS-StringBuffer"><a href="#StringBuilder-VS-StringBuffer" class="headerlink" title="StringBuilder VS. StringBuffer"></a>StringBuilder VS. StringBuffer</h3><ul><li>StringBuilder和StringBuffer接口完全相同</li><li>StringBuffer是StringBuilder的线程安全版本</li><li>跨线程比较少见，目前没有必要使用StringBuffer</li></ul><h2 id="3-包装类型"><a href="#3-包装类型" class="headerlink" title="3.包装类型"></a>3.包装类型</h2><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><ul><li>基本类型：int float …</li><li>引用类型: class<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n = null; <span class="comment">//会报错</span></span><br></pre></td></tr></table></figure>如何把一个基本类型视为对象(引用类型)<br>​</li></ul><h3 id="包装类型"><a href="#包装类型" class="headerlink" title="包装类型"></a>包装类型</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Integer</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> value;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Integer</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义一个Integer类包含一个实例字段int<br>可以把Integer视为int的包装类型wrapper<br><img src="https://cdn.nlark.com/yuque/0/2021/png/12519800/1640869164683-8f08e2e7-0d24-43d6-bfba-cadd2d346954.png#clientId=u0ecaea69-7dfa-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=138&id=u881683a2&margin=%5Bobject%20Object%5D&name=image.png&originHeight=276&originWidth=370&originalType=binary&ratio=1&rotation=0&showTitle=false&size=33648&status=done&style=none&taskId=ua26b8ea0-5f9d-40f6-ae71-81205254b40&title=&width=185" alt="image.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Integer n = <span class="keyword">new</span> <span class="built_in">Integer</span>(<span class="number">99</span>);</span><br><span class="line"><span class="keyword">int</span> i = n.<span class="built_in">intValue</span>();</span><br></pre></td></tr></table></figure><p>编译器可以自动在int和Integer之间转型</p><ul><li>自动装箱 auto boxing</li></ul><p>int -&gt; Integer</p><ul><li>自动拆箱 auto unboxing</li></ul><p>Integer-&gt;int<br>​</p><ul><li>自动装箱和自动拆箱只发生在编译阶段</li><li>装箱和拆箱会影响执行效率</li><li>编译后的class代码是严格区分基本类型和引用类型</li><li>Integer -&gt; int 执行时可能会报错<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Integer it = null;</span><br><span class="line"><span class="keyword">int</span> n = it; <span class="comment">// 自动拆箱会报错</span></span><br></pre></td></tr></table></figure>Integer Float Double均继承自Number<br>​</li></ul><p>​</p><h2 id="4-JavaBean"><a href="#4-JavaBean" class="headerlink" title="4.JavaBean"></a>4.JavaBean</h2><h3 id="什么是JavaBean"><a href="#什么是JavaBean" class="headerlink" title="什么是JavaBean"></a>什么是JavaBean</h3><p>许多class的定义都符合</p><ul><li>若干private实例字段</li><li>通过public方法读写实例字段</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2021/png/12519800/1640869681742-6e944bc5-0147-4239-9d93-5e6688f80f94.png#clientId=u0ecaea69-7dfa-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=135&id=u7b135eb4&margin=%5Bobject%20Object%5D&name=image.png&originHeight=269&originWidth=386&originalType=binary&ratio=1&rotation=0&showTitle=false&size=56322&status=done&style=none&taskId=ueea17da1-b1cd-4984-b69d-3ab2442ecb4&title=&width=193" alt="image.png"><br>符合命名规范的class被称为JavaBean</p><ul><li>private Type field</li><li>public Type getField()</li><li>public void setField(Type value)</li></ul><p>注意方法名称的大小写<br>​</p><p>boolean字段的读方法命名未isXxx()</p><ul><li>private boolean child</li><li>public boolean isChild()</li><li>public void setChild(boolean value)</li></ul><p>通常把一组对应的getter和setter称为属性(Property)</p><ul><li>name属性<ul><li>对应读方法getName()</li><li>对应写方法setName()</li></ul></li></ul><p>只有getter属性称为只读属性Read-only<br>只有setter属性称为只写属性Write-only<br>​</p><p>属性只需要定义getter/setter方法<br>不一定需要对应的字段</p><ul><li>child只读属性<ul><li>对应读方法isChild()</li></ul></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2021/png/12519800/1640870046172-642b94f0-ae8f-4f51-94dc-344e79a0e46f.png#clientId=u0ecaea69-7dfa-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=173&id=u8a9a0d5a&margin=%5Bobject%20Object%5D&name=image.png&originHeight=345&originWidth=391&originalType=binary&ratio=1&rotation=0&showTitle=false&size=54544&status=done&style=none&taskId=ud3fdad8b-3c3d-4af4-ab32-6e372907a37&title=&width=195.5" alt="image.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.beans.BeanInfo;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">BeanInfo bi = Introspector.<span class="built_in">getBeanInfo</span>(Person.class);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (PropertyDescriptor pd : bi.<span class="built_in">getPropertyDescriptors</span>()) &#123;</span><br><span class="line"><span class="built_in">printPropertyDescriptor</span>(pd);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2021/png/12519800/1640870385806-49609f2e-2138-4c57-9a8a-35ab044bbd19.png#clientId=u0ecaea69-7dfa-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=146&id=u3b212235&margin=%5Bobject%20Object%5D&name=image.png&originHeight=191&originWidth=515&originalType=binary&ratio=1&rotation=0&showTitle=false&size=110958&status=done&style=none&taskId=u1f16f89d-efbe-4957-8539-03580b57d3d&title=&width=393.5" alt="image.png"></p><h2 id="5-枚举类"><a href="#5-枚举类" class="headerlink" title="5.枚举类"></a>5.枚举类</h2><h3 id="enumeration"><a href="#enumeration" class="headerlink" title="enumeration"></a>enumeration</h3><p>如何定义常量<br>if(day == Weekday.SUN) {…}</p><p>用enum定义常量</p><ul><li>关键字enum定义常量类型</li><li>常量本身带有类型信息</li><li>使用==比较<ul><li>if (day == Weekday.FRI) {…}</li></ul></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">Weekday</span> &#123;</span></span><br><span class="line">SUN, MON, TUE, WED, THU, FRI, SAT;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">Color</span> &#123;</span></span><br><span class="line">RED, GREEN, BLUE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>enum定义的类型实际上是class</p><ul><li>继承自java.lang.Enum</li><li>不能通过new创建实例</li><li>所有常量都是唯一实例 引用类型</li><li>可以用于switch语句</li></ul><p>​</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">Weekday</span> &#123;</span></span><br><span class="line"><span class="built_in">SUN</span>(<span class="string">&quot;周日&quot;</span>), <span class="built_in">MON</span>(<span class="string">&quot;周一&quot;</span>), <span class="built_in">TUE</span>(<span class="string">&quot;周二&quot;</span>), <span class="built_in">WED</span>(<span class="string">&quot;周三&quot;</span>), <span class="built_in">THU</span>(<span class="string">&quot;周四&quot;</span>), <span class="built_in">FRI</span>(<span class="string">&quot;周五&quot;</span>), <span class="built_in">SAT</span>(<span class="string">&quot;周六&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String chinese;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Weekday</span><span class="params">(String chinese)</span></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.chinese = chinese;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">toChinese</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> chinese;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2021/png/12519800/1640871015364-11b77152-b218-4878-9550-c13dd8d51c5f.png#clientId=u0ecaea69-7dfa-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=171&id=u167ebcb4&margin=%5Bobject%20Object%5D&name=image.png&originHeight=341&originWidth=695&originalType=binary&ratio=1&rotation=0&showTitle=false&size=125864&status=done&style=none&taskId=u8866896a-fde4-45b6-a661-06b5dfdbd2f&title=&width=347.5" alt="image.png"><br>​</p><h2 id="6-常用工具类"><a href="#6-常用工具类" class="headerlink" title="6.常用工具类"></a>6.常用工具类</h2><p>常用工具类</p><ul><li>Math</li><li>Random 伪随机 （给定种子后伪随机数算法会生成完全相同的序列，不给定种子时Random使用系统当前时间戳作为种子）</li><li>SecureRandom 安全随机</li><li>BigInteger</li><li>BigDecimal</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-面向对象的概念&quot;&gt;&lt;a href=&quot;#1-面向对象的概念&quot; class=&quot;headerlink&quot; title=&quot;1-面向对象的概念&quot;&gt;&lt;/a&gt;1-面向对象的概念&lt;/h1&gt;&lt;h2 id=&quot;1-类与实例&quot;&gt;&lt;a href=&quot;#1-类与实例&quot; class=&quot;head</summary>
      
    
    
    
    <category term="Coding" scheme="http://example.com/categories/Coding/"/>
    
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Cpp-GeekBand(1)</title>
    <link href="http://example.com/2022/01/06/Cpp-GeekBand-1/"/>
    <id>http://example.com/2022/01/06/Cpp-GeekBand-1/</id>
    <published>2022-01-06T04:57:14.000Z</published>
    <updated>2022-01-06T06:44:56.139Z</updated>
    
    <content type="html"><![CDATA[<h1 id="《C-面向对象高级开发》"><a href="#《C-面向对象高级开发》" class="headerlink" title="《C++面向对象高级开发》"></a>《C++面向对象高级开发》</h1><h2 id="Chapter01-C-编程简介"><a href="#Chapter01-C-编程简介" class="headerlink" title="Chapter01 C++编程简介"></a>Chapter01 C++编程简介</h2><h3 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h3><p>曾经学过某类面向过程语言（C语言）</p><ul><li><p>变量</p></li><li><p>类型:int,float,char,struct …</p></li><li><p>作用域scope</p></li><li><p>循环:while,for</p></li><li><p>流程控制:if-else,switch-case</p><h3 id="学习目标"><a href="#学习目标" class="headerlink" title="学习目标"></a>学习目标</h3></li><li><p>培养正规的、大气的编程习惯</p></li><li><p>以良好的方式编写C++ class</p><ul><li>class without pointer members<ul><li>Complex</li></ul></li><li>class with pointer members<ul><li>String</li></ul></li></ul></li><li><p>学习Classes之间的关系</p><ul><li>继承(inheritance)</li><li>复合(composition)</li><li>委托(delegation)<h3 id="获得的代码"><a href="#获得的代码" class="headerlink" title="获得的代码"></a>获得的代码</h3>complex.h<br>complex-test.cpp<br>string.h<br>string-test.cpp<br>oop-demo.h<br>oop-test.cpp<h3 id="C-的历史"><a href="#C-的历史" class="headerlink" title="C++的历史"></a>C++的历史</h3></li></ul></li><li><p>B语言（1969）</p></li><li><p>C语言（1972）</p></li><li><p>C++语言（1983）</p></li><li><p>其他OOP语言</p><ul><li>Java语言</li><li>C#语言、<h3 id="C-演化"><a href="#C-演化" class="headerlink" title="C++演化"></a>C++演化</h3></li></ul></li><li><p>C++98（1.0）</p></li><li><p>C++03（TR1）</p></li><li><p>C++11（2.0）</p></li><li><p>C++14</p></li><li><p>C++内容</p><ul><li>C++语言</li><li>C++标准库<h3 id="C-相关书籍"><a href="#C-相关书籍" class="headerlink" title="C++相关书籍"></a>C++相关书籍</h3>&lt;Effective C++&gt;<br>&lt;C++标准库&gt;<br>&lt;STL源码剖析&gt;<h2 id="Chapter02-头文件与类的声明"><a href="#Chapter02-头文件与类的声明" class="headerlink" title="Chapter02 头文件与类的声明"></a>Chapter02 头文件与类的声明</h2><h3 id="C与C"><a href="#C与C" class="headerlink" title="C与C++"></a>C与C++</h3>C —&gt; 面向过程<br>C++ —&gt; 面向对象，将C中的data/function封装成data member/function member<h3 id="C-关于数据和函数"><a href="#C-关于数据和函数" class="headerlink" title="C++关于数据和函数"></a>C++关于数据和函数</h3></li></ul></li><li><p>complex</p><ul><li>数据<ul><li>实部</li><li>虚部</li></ul></li><li>函数<ul><li>加减乘除</li><li>共轭，正弦</li></ul></li></ul></li><li><p>string</p><ul><li>数据<ul><li>字符</li></ul></li><li>函数<ul><li>拷贝，输出，附加，插入<h3 id="C-programs代码基本形式"><a href="#C-programs代码基本形式" class="headerlink" title="C++ programs代码基本形式"></a>C++ programs代码基本形式</h3></li></ul></li></ul></li><li><p>.h (header files)</p><ul><li>&lt;iostream.h&gt; 标准库</li><li>“complex.h” Classes Declaration声明</li></ul></li><li><p>.cpp</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;complex.h&quot;</span></span></span><br></pre></td></tr></table></figure><p>延伸文件名(extension file name)不一定是.h或.cpp，也可能是.hpp或其他或甚至无延伸名</p><h3 id="C-vs-C"><a href="#C-vs-C" class="headerlink" title="C++ vs. C"></a>C++ vs. C</h3><p>C</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span> --&gt; <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">7</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;i=%d \n&quot;</span>, i);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>C++</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream.h&gt;</span> --&gt; <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">7</span>;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;i=&quot;</span>&lt;&lt;i&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Header头文件中的防御式声明"><a href="#Header头文件中的防御式声明" class="headerlink" title="Header头文件中的防御式声明"></a>Header头文件中的防御式声明</h3><p>complex.h （防御式声明，防止重复引用）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> __COMPLEX__</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __COMPLEX__</span></span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>complex-test.h</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;complex.h&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">complex <span class="title">c1</span><span class="params">(<span class="number">2</span>,<span class="number">1</span>)</span></span>;</span><br><span class="line">    complex c2;</span><br><span class="line">    cout&lt;&lt;c1&lt;&lt;endl;</span><br><span class="line">    cout&lt;&lt;c2&lt;&lt;endl;</span><br><span class="line">    </span><br><span class="line">    c2 = c1 + <span class="number">5</span>;</span><br><span class="line">    c2 = <span class="number">7</span> + c1;</span><br><span class="line">    c2 = c1 + c2;</span><br><span class="line">    c2 += c1</span><br><span class="line">    c2 += <span class="number">3</span>;</span><br><span class="line">    c2 = -c1;</span><br><span class="line">    </span><br><span class="line">    cout &lt;&lt; (c1 == c2) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; (c1 != c2) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">conj</span>(c1) &lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="头文件的布局"><a href="#头文件的布局" class="headerlink" title="头文件的布局"></a>头文件的布局</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> __COMPLEX__</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __COMPLEX__</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ostream</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">complex</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//forward declarations前置声明</span></span><br><span class="line">complex&amp;</span><br><span class="line">__doapl (complex* ths, <span class="keyword">const</span> complex&amp; r);</span><br><span class="line"></span><br><span class="line"><span class="comment">//class declarations类-声明</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">complex</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//class definition类-定义</span></span><br><span class="line">complex::function ...</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="class的声明-declaration"><a href="#class的声明-declaration" class="headerlink" title="class的声明(declaration)"></a>class的声明(declaration)</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">complex</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">complex</span> (<span class="keyword">double</span> r = <span class="number">0</span>, <span class="keyword">double</span> i = <span class="number">0</span>)</span><br><span class="line">    : <span class="built_in">re</span> (r), <span class="built_in">im</span> (i)</span><br><span class="line">    &#123;&#125;</span><br><span class="line">complex&amp; <span class="keyword">operator</span> += (<span class="keyword">const</span> complex&amp;);</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">real</span> <span class="params">()</span> <span class="keyword">const</span> </span>&#123;<span class="keyword">return</span> re; &#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">imag</span> <span class="params">()</span> <span class="keyword">const</span> </span>&#123;<span class="keyword">return</span> im; &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">double</span> re,im;</span><br><span class="line"><span class="keyword">friend</span> complex&amp; __doapl (complex*, <span class="keyword">const</span> complex&amp;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="function">complex <span class="title">c1</span><span class="params">(<span class="number">2</span>,<span class="number">1</span>)</span></span>;</span><br><span class="line">    complex c2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="class-template-模板-简介"><a href="#class-template-模板-简介" class="headerlink" title="class template(模板)简介"></a>class template(模板)简介</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">complex</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">complex</span> (T r=<span class="number">0</span>, T i=<span class="number">0</span>)</span><br><span class="line">: <span class="built_in">re</span> (r), <span class="built_in">im</span> (i)</span><br><span class="line">&#123;&#125;</span><br><span class="line">complex&amp; <span class="keyword">operator</span> += (<span class="keyword">const</span> complex&amp;);</span><br><span class="line"><span class="function">T <span class="title">real</span> <span class="params">()</span> <span class="keyword">const</span> </span>&#123;<span class="keyword">return</span> re; &#125;</span><br><span class="line"><span class="function">T <span class="title">imag</span> <span class="params">()</span> <span class="keyword">const</span> </span>&#123;<span class="keyword">return</span> im; &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">T re,im;</span><br><span class="line"><span class="keyword">friend</span> complex&amp; __doapl (complex*, <span class="keyword">const</span> complex&amp;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="function">complex&lt;<span class="keyword">double</span>&gt; <span class="title">c1</span><span class="params">(<span class="number">2.5</span>,<span class="number">1.5</span>)</span></span>;</span><br><span class="line">    <span class="function">complex&lt;<span class="keyword">int</span>&gt; <span class="title">c2</span><span class="params">(<span class="number">2</span>,<span class="number">6</span>)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Chapter-03-构造函数"><a href="#Chapter-03-构造函数" class="headerlink" title="Chapter 03 构造函数"></a>Chapter 03 构造函数</h2><h3 id="class的声明"><a href="#class的声明" class="headerlink" title="class的声明"></a>class的声明</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">complex</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">complex</span> (<span class="keyword">double</span> r = <span class="number">0</span>, <span class="keyword">double</span> i = <span class="number">0</span>)</span><br><span class="line">    : <span class="built_in">re</span> (r), <span class="built_in">im</span> (i)</span><br><span class="line">    &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 有些函数在此直接定义，另一些在body外定义。</span></span><br><span class="line">complex&amp; <span class="keyword">operator</span> += (<span class="keyword">const</span> complex&amp;);</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">real</span> <span class="params">()</span> <span class="keyword">const</span> </span>&#123;<span class="keyword">return</span> re; &#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">imag</span> <span class="params">()</span> <span class="keyword">const</span> </span>&#123;<span class="keyword">return</span> im; &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">double</span> re,im;</span><br><span class="line"><span class="keyword">friend</span> complex&amp; __doapl (complex*, <span class="keyword">const</span> complex&amp;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="inline内联函数"><a href="#inline内联函数" class="headerlink" title="inline内联函数"></a>inline内联函数</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">complex</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">complex</span> (<span class="keyword">double</span> r = <span class="number">0</span>, <span class="keyword">double</span> i = <span class="number">0</span>)</span><br><span class="line">    : <span class="built_in">re</span> (r), <span class="built_in">im</span> (i)</span><br><span class="line">    &#123;&#125;</span><br><span class="line">complex&amp; <span class="keyword">operator</span> += (<span class="keyword">const</span> complex&amp;);</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">real</span> <span class="params">()</span> <span class="keyword">const</span> </span>&#123;<span class="keyword">return</span> re; &#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">imag</span> <span class="params">()</span> <span class="keyword">const</span> </span>&#123;<span class="keyword">return</span> im; &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">double</span> re,im;</span><br><span class="line"><span class="keyword">friend</span> complex&amp; __doapl (complex*, <span class="keyword">const</span> complex&amp;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>函数若在class body内定义完成，便自动成为inline候选人。内联类似于宏，执行速度可能会较快。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">double</span></span></span><br><span class="line"><span class="function"><span class="title">imag</span><span class="params">(<span class="keyword">const</span> complex&amp; x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x.<span class="built_in">imag</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="access-level-访问级别"><a href="#access-level-访问级别" class="headerlink" title="access level(访问级别)"></a>access level(访问级别)</h3></li><li><p>public</p></li><li><p>private</p></li><li><p>protected</p><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">complex</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">complex (double r = 0, double i = 0)</span></span><br><span class="line"><span class="comment">&#123; re = r; im = i;&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="built_in">complex</span> (<span class="keyword">double</span> r = <span class="number">0</span>, <span class="keyword">double</span> i = <span class="number">0</span>)</span><br><span class="line">    : <span class="built_in">re</span> (r), <span class="built_in">im</span> (i) <span class="comment">//initialization list (初始列)</span></span><br><span class="line">    &#123;&#125;</span><br><span class="line">complex&amp; <span class="keyword">operator</span> += (<span class="keyword">const</span> complex&amp;);</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">real</span> <span class="params">()</span> <span class="keyword">const</span> </span>&#123;<span class="keyword">return</span> re; &#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">imag</span> <span class="params">()</span> <span class="keyword">const</span> </span>&#123;<span class="keyword">return</span> im; &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">double</span> re,im;</span><br><span class="line"><span class="keyword">friend</span> complex&amp; __doapl (complex*, <span class="keyword">const</span> complex&amp;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="function">complex <span class="title">c1</span><span class="params">(<span class="number">2</span>,<span class="number">1</span>)</span></span>;</span><br><span class="line">    complex c2;</span><br><span class="line">    complex* p = <span class="keyword">new</span> <span class="built_in">complex</span>(<span class="number">4</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不带指针的类多半不用写析构函数。</p><h3 id="构造函数可以有很多个重载"><a href="#构造函数可以有很多个重载" class="headerlink" title="构造函数可以有很多个重载"></a>构造函数可以有很多个重载</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">complex</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">complex</span> (<span class="keyword">double</span> r = <span class="number">0</span>, <span class="keyword">double</span> i = <span class="number">0</span>)</span><br><span class="line">    : <span class="built_in">re</span> (r), <span class="built_in">im</span> (i)</span><br><span class="line">    &#123;&#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    complex () : re(0), im(0) &#123; &#125;</span></span><br><span class="line"><span class="comment">如此重载complex是错误的，因为第一个complex的默认值为r=0,i=0，可能会出现歧义。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">complex&amp; <span class="keyword">operator</span> += (<span class="keyword">const</span> complex&amp;);</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">real</span> <span class="params">()</span> <span class="keyword">const</span> </span>&#123;<span class="keyword">return</span> re; &#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">imag</span> <span class="params">()</span> <span class="keyword">const</span> </span>&#123;<span class="keyword">return</span> im; &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">double</span> re,im;</span><br><span class="line"><span class="keyword">friend</span> complex&amp; __doapl (complex*, <span class="keyword">const</span> complex&amp;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>一般函数也可以重载，void real(double r) <del>const</del> { re = r; }</p><h2 id="Chapter-04-参数传递与返回值"><a href="#Chapter-04-参数传递与返回值" class="headerlink" title="Chapter 04 参数传递与返回值"></a>Chapter 04 参数传递与返回值</h2><h3 id="把构造函数放在private区域内"><a href="#把构造函数放在private区域内" class="headerlink" title="把构造函数放在private区域内"></a>把构造函数放在private区域内</h3><p>把构造函数放在private区域内，表示该构造函数不能被外界调用，即不允许被外界创建对象，例如设计模式中的Singleton单例模式。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">static</span> A&amp; <span class="title">getInstance</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="built_in">setup</span>()&#123;...&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="built_in">A</span>();</span><br><span class="line"><span class="built_in">A</span>(<span class="keyword">const</span> A&amp; rhs);</span><br><span class="line">...</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">A&amp; <span class="title">A::getInstance</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> A a;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;《C-面向对象高级开发》&quot;&gt;&lt;a href=&quot;#《C-面向对象高级开发》&quot; class=&quot;headerlink&quot; title=&quot;《C++面向对象高级开发》&quot;&gt;&lt;/a&gt;《C++面向对象高级开发》&lt;/h1&gt;&lt;h2 id=&quot;Chapter01-C-编程简介&quot;&gt;&lt;a hr</summary>
      
    
    
    
    <category term="Coding" scheme="http://example.com/categories/Coding/"/>
    
    
    <category term="Cpp" scheme="http://example.com/tags/Cpp/"/>
    
  </entry>
  
  <entry>
    <title>SEG abstract写作指北</title>
    <link href="http://example.com/2022/01/06/SEG-abstract%E5%86%99%E4%BD%9C%E6%8C%87%E5%8C%97/"/>
    <id>http://example.com/2022/01/06/SEG-abstract%E5%86%99%E4%BD%9C%E6%8C%87%E5%8C%97/</id>
    <published>2022-01-06T04:56:14.000Z</published>
    <updated>2022-01-06T06:45:26.403Z</updated>
    
    <content type="html"><![CDATA[<p>SEG abstract 的基本模板可参照 <a href="https://www.overleaf.com/latex/templates/an-example-seg-expanded-abstract/ydbqyvvsmddp">An example SEG expanded abstract</a><br>一份abstract主要分为Summary、Introduction、Methodology、Conclusion，主要提一下Summary、Introduction的基本写法。</p><h2 id="A-Summary"><a href="#A-Summary" class="headerlink" title="A. Summary"></a>A. Summary</h2><p>Summary主要用于总结全文概括主旨，与SCI的abstract不一样，在SEG Abstract全文四页的大背景下，Summary力求精简，抛去大背景和铺垫，直入主题。<br><strong>流程</strong><br>本次工作成果——面临的主要挑战——解决方法/创新点——方法论——结论<br><strong>举个栗子（以QT为例）</strong><br>我们提出了一种用AI技术实时制定股票交易策略的新方法（本次工作成果）。传统交易方法面临着历史数据庞大、分析数据效率较低、策略定制不及时的方法（主要挑战）。为了解决这个问题，我们尝试将AI技术引入投资决策中（创新点）。我们利用AI技术从海量历史数据学习高收益的交易方法，并利用其高效性，实时定制交易策略，完成高频交易（方法论）。根据我们在量化交易平台上模拟盘的试验结果，AI技术指定股票交易策略取得了比传统方法更加出色的效果（结论）。</p><h2 id="B-Introduction"><a href="#B-Introduction" class="headerlink" title="B. Introduction"></a>B. Introduction</h2><p>Introduction主要包括研究背景、研究现状、此次研究的结果。在开展课题阅读文献的时候，可以适时对文献进行整理分类，这样在后期撰写Introduction时会轻松不少。Introduction引用的文献可以主要分为两大类：背景介绍和研究进展。前者介绍此项研究的大背景，论证研究的重要性或必要性；后者阐述传统的研究方法，其他作者的研究方法。<br><strong>流程</strong><br>此项工作的任务/挑战/研究背景——研究现状/传统方法——传统方法存在的不足——近几年其他研究人员为此做过哪些改进，但是哪些地方仍需要改进——我们做了哪些工作效果如何？</p><h2 id="C-写作常用App和网站推荐"><a href="#C-写作常用App和网站推荐" class="headerlink" title="C. 写作常用App和网站推荐"></a>C. 写作常用App和网站推荐</h2><ul><li>论文搜集<ul><li>sci-hub: <a href="https://sci-hub.se/">https://sci-hub.se</a></li><li>Google scholar镜像站：<a href="http://scholar.hedasudi.com/">http://scholar.hedasudi.com/</a></li></ul></li><li>语法修正<ul><li>Grammarly（内置于word使用）</li><li>1Checker（粘贴文本改错使用）</li></ul></li><li>词汇润色<ul><li>Academic Phrasebank：<a href="http://www.phrasebank.manchester.ac.uk/introducing-work/">http://www.phrasebank.manchester.ac.uk/introducing-work/</a></li><li>thesaurus（近义词查找）：<a href="https://www.thesaurus.com/">https://www.thesaurus.com/</a></li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;SEG abstract 的基本模板可参照 &lt;a href=&quot;https://www.overleaf.com/latex/templates/an-example-seg-expanded-abstract/ydbqyvvsmddp&quot;&gt;An example SEG exp</summary>
      
    
    
    
    <category term="Work" scheme="http://example.com/categories/Work/"/>
    
    
    <category term="杂项" scheme="http://example.com/tags/%E6%9D%82%E9%A1%B9/"/>
    
  </entry>
  
  <entry>
    <title>Cpp Advantage(1)</title>
    <link href="http://example.com/2022/01/06/Cpp-Advantage-1/"/>
    <id>http://example.com/2022/01/06/Cpp-Advantage-1/</id>
    <published>2022-01-06T04:36:46.000Z</published>
    <updated>2022-01-06T06:45:29.351Z</updated>
    
    <content type="html"><![CDATA[<h1 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h1><h1 id="Section01-封装"><a href="#Section01-封装" class="headerlink" title="Section01 封装"></a>Section01 封装</h1><h2 id="初识类与对象"><a href="#初识类与对象" class="headerlink" title="初识类与对象"></a>初识类与对象</h2><h3 id="认识类与对象"><a href="#认识类与对象" class="headerlink" title="认识类与对象"></a>认识类与对象</h3><ul><li>定义</li></ul><p>类（class）：在面向对象编程中是一种面的对象计算机语言的构造，是创建对象的蓝图，描述了所创建的对象共同的属性和方法。<br>对象（object）：由类创造出对象</p><ul><li>深入理解类</li></ul><p>类是 C++ 的核心特性，在 C++ 的世界中，可以将所有事物都看作为一个对象，将对象进行封装之后成为一个类，通常被称为用户定义类型。<br>例如：可以将猫、狗、鸟、桌子、学生、人、三角形、矩形等都封装为一个类，只要在实际编程中用到的都可以抽象封装为一个类。</p><ul><li>C++相关概念</li></ul><ol><li><p>构造函数类的构造函数是一种特殊的函数，在创建一个新的对象时自动调用</p></li><li><p>析构函数类的析构函数也是一种特殊的函数，在删除所创建的对象时自动调用</p></li><li><p>拷贝构造函数拷贝构造函数，是一种特殊的构造函数，它在创建对象时，是使用同一类中之前创建的对象来初始化新创建的对象</p></li><li><p>友元函数友元函数可以访问类的 private 和 protected 成员</p></li><li><p>内联函数通过内联函数，编译器试图在调用函数的地方扩展函数体中的代码</p></li><li><p>类成员函数类的成员函数是指那些把定义和原型写在类定义内部的函数，就像类定义中的其他变量一样</p></li><li><p>类访问修饰符类成员可以被定义为 public、private 或 protected。默认情况下是定义为 private</p></li><li><p>this指针每个对象都有一个特殊的指针 this，它指向对象本身</p></li><li><p>静态成员类的数据成员和成员函数都可以被声明为静态的</p><h3 id="自定义类"><a href="#自定义类" class="headerlink" title="自定义类"></a>自定义类</h3><p>举个栗子：假设最近在做一个学校管理系统的项目，首先想到可以将学生定义为一个类，然后发现可以在学生类的基础上再抽象出一个人类的对象，如果需要用到学生的学科，可以进一步将学科也封装为一个，还可以封装文件操作类，数据库操作类等等。</p><h4 id="示例代码-1"><a href="#示例代码-1" class="headerlink" title="示例代码 1"></a>示例代码 1</h4><p>定义一个学生类：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// class 类关键字、Student 类名</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="comment">// 访问限制符 - 公有属性</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Student</span>() &#123;&#125;    <span class="comment">// 构造函数</span></span><br><span class="line">    ~<span class="built_in">Student</span>() &#123;&#125;    <span class="comment">// 析构函数</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 成员函数</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setName</span><span class="params">(string name)</span> </span>&#123; <span class="keyword">this</span>-&gt;name = name; &#125;</span><br><span class="line">    <span class="function">string <span class="title">getName</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> name; &#125;;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123; <span class="keyword">this</span>-&gt;age = age; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> age; &#125;</span><br><span class="line"><span class="comment">// 访问限制符 - 私有属性</span></span><br><span class="line"><span class="keyword">private</span>: </span><br><span class="line">    <span class="comment">// 数据成员</span></span><br><span class="line">    string name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Note：</p></li><li><p>定义一个类时，需要使用关键字 class 来进行修饰。</p></li><li><p>一个简单的类可以没有构造函数和析构函数，但是系统自动生成一个默认的构造函数和析构函数。</p></li><li><p>在类中使用关键字 public 、 private 和 protected 来限制数据成员和成员函数，一般使用 public 和 private 来修饰数据成员和成员函数。</p></li><li><p>一般将数据成员封装在 private 关键字下，不让用户直接访问数据成员，而是通过成员函数来进行访问。</p></li><li><p>在类的最后（大括号后）必须要有一个逗号，勿忘。</p><h3 id="实例化对象"><a href="#实例化对象" class="headerlink" title="实例化对象"></a>实例化对象</h3><p>实例化对象有两种方式，一种是在栈上实例化，另一种是堆上实例化。</p><h4 id="示例代码-2"><a href="#示例代码-2" class="headerlink" title="示例代码 2"></a>示例代码 2</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 栈上实例化</span></span><br><span class="line">    Student stu1;</span><br><span class="line">    stu1.<span class="built_in">setName</span>(<span class="string">&quot;jake&quot;</span>);</span><br><span class="line">    stu1.<span class="built_in">setAge</span>(<span class="number">15</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;My name is &quot;</span> &lt;&lt; stu1.<span class="built_in">getName</span>() &lt;&lt; <span class="string">&quot;, I&#x27;m &quot;</span> &lt;&lt; stu1.<span class="built_in">getAge</span>() &lt;&lt; <span class="string">&quot; years old.&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 堆上实例化</span></span><br><span class="line">    Student *stu2 = <span class="keyword">new</span> Student;</span><br><span class="line">    <span class="comment">// 访问</span></span><br><span class="line">    stu2-&gt;<span class="built_in">setName</span>(<span class="string">&quot;Siri&quot;</span>);</span><br><span class="line">    stu2-&gt;<span class="built_in">setAge</span>(<span class="number">5</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;My name is &quot;</span> &lt;&lt; stu2-&gt;<span class="built_in">getName</span>() &lt;&lt; <span class="string">&quot;, I&#x27;m &quot;</span> &lt;&lt; stu2-&gt;<span class="built_in">getAge</span>() &lt;&lt; <span class="string">&quot; years old.&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="comment">// 释放内存</span></span><br><span class="line">    <span class="keyword">delete</span> stu2;</span><br><span class="line">    stu2 = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实例化对象注意事项：</p></li><li><p>在栈上实例化的对象，超出定义域对象资源会自动被系统回收。</p></li><li><p>在堆上实例化的对象，最后需要使用 delete 关键字来释放内存，否则会造成内存泄漏。</p></li><li><p>使用栈实例化的对象使用 “.” 来访问数据成员或成员函数，在堆上实例化的对象使用 “-&gt;” 来访问数据成员或成员函数。</p></li><li><p>释放完内存后将对象置空，防止野指针。</p><h4 id="实验操作1"><a href="#实验操作1" class="headerlink" title="实验操作1"></a>实验操作1</h4><p>实验要求：</p></li><li><p>在 /home/project/ 目录下创建一个 Student.cpp 文件。</p></li><li><p>尝试根据示例代码 1 和示例代码 2 来编写程序。</p></li><li><p>定义一个 Student 类，Student 类中定义 name 和 age 数据成员。</p></li><li><p>在 Student 类中定义其构造函数、析构函数和数据操作函数。</p></li><li><p>对 main 函数分别在栈和堆上实例化对象，并访问成员函数，最后输出对象的 name 和 age 值。</p></li><li><p>编写完并且保存文件。</p></li><li><p>编译并查看是否有错误信息：g++ Student.cpp -o Student -std=c++11。</p></li><li><p>运行程序并查看输出信息：./Student。</p></li><li><p>创建cpp文件</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd /home/project/</span><br><span class="line">$ touch Student.cpp</span><br></pre></td></tr></table></figure></li><li><p>编写Student类</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="comment">// 构造函数</span></span><br><span class="line">        <span class="built_in">Student</span>()&#123;&#125;</span><br><span class="line">        <span class="comment">// 构造函数的重载不能存在歧义</span></span><br><span class="line">        <span class="comment">//Student(string iname = &quot;anonymous&quot;, int iage = 18, string isid = &quot;101&quot;) </span></span><br><span class="line">        <span class="comment">//        : name(iname), age(iage), sid(isid)&#123;&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 析构函数</span></span><br><span class="line">        ~<span class="built_in">Student</span>()&#123;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">friend</span> ostream&amp; <span class="keyword">operator</span>&lt;&lt; (ostream&amp;,<span class="keyword">const</span> Student&amp;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 成员函数</span></span><br><span class="line">        <span class="comment">// 设置姓名</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">setName</span><span class="params">(string name)</span></span>&#123;<span class="keyword">this</span>-&gt;name = name;&#125;</span><br><span class="line">        <span class="comment">// 获得姓名</span></span><br><span class="line">        <span class="function">string <span class="title">getName</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> <span class="keyword">this</span>-&gt;name;&#125;</span><br><span class="line">        <span class="comment">// 设置年龄</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span></span>&#123;<span class="keyword">this</span>-&gt;age = age;&#125;</span><br><span class="line">        <span class="comment">// 获得年龄</span></span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> <span class="keyword">this</span>-&gt;age;&#125;</span><br><span class="line">        <span class="comment">// 设置学号</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">setSid</span><span class="params">(string sid)</span></span>&#123;<span class="keyword">this</span>-&gt;sid = sid;&#125;</span><br><span class="line">        <span class="comment">// 获得学号</span></span><br><span class="line">        <span class="function">string <span class="title">getSid</span><span class="params">()</span></span>&#123;<span class="keyword">return</span> <span class="keyword">this</span>-&gt;sid;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        <span class="comment">// 成员变量</span></span><br><span class="line">        string name;</span><br><span class="line">        <span class="keyword">int</span> age;</span><br><span class="line">        string sid;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">ostream&amp; <span class="keyword">operator</span>&lt;&lt; (ostream&amp; os,<span class="keyword">const</span> Student&amp; stu)</span><br><span class="line">&#123;</span><br><span class="line">    os &lt;&lt; stu.name&lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt;stu.age&lt;&lt; <span class="string">&quot; &quot;</span>&lt;&lt; stu.sid;</span><br><span class="line">    <span class="keyword">return</span> os;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 栈上初始化</span></span><br><span class="line">    Student stu1;</span><br><span class="line">    stu1.<span class="built_in">setName</span>(<span class="string">&quot;Amy&quot;</span>);</span><br><span class="line">    stu1.<span class="built_in">setAge</span>(<span class="number">18</span>);</span><br><span class="line">    stu1.<span class="built_in">setSid</span>(<span class="string">&quot;101&quot;</span>);</span><br><span class="line">    cout &lt;&lt; stu1 &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; stu1.<span class="built_in">getName</span>() &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; stu1.<span class="built_in">getAge</span>() &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt;stu1.<span class="built_in">getSid</span>() &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 堆上初始化</span></span><br><span class="line">    Student *stu2 = <span class="keyword">new</span> Student;</span><br><span class="line">    <span class="comment">// 访问</span></span><br><span class="line">    stu2-&gt;<span class="built_in">setName</span>(<span class="string">&quot;Mike&quot;</span>);</span><br><span class="line">    stu2-&gt;<span class="built_in">setAge</span>(<span class="number">18</span>);</span><br><span class="line">    stu2-&gt;<span class="built_in">setSid</span>(<span class="string">&quot;102&quot;</span>);</span><br><span class="line">    cout &lt;&lt; stu2-&gt;<span class="built_in">getName</span>() &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; stu2-&gt;<span class="built_in">getAge</span>() &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt;stu2-&gt;<span class="built_in">getSid</span>() &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 释放内存</span></span><br><span class="line">    <span class="keyword">delete</span> stu2;</span><br><span class="line">    stu2 = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="string介绍"><a href="#string介绍" class="headerlink" title="string介绍"></a>string介绍</h3></li></ol><ul><li>string类</li></ul><ol><li>string 类头文件 #include<string>。</li><li>string 类在 std 命名空间内。</li><li>使用 string 实例化一个字符串类型的对象。</li><li>对字符串对象执行例如拼接、查找等操作。</li></ol><ul><li><p>初始化方式</p><table><thead><tr><th>实例化</th><th>解释</th></tr></thead><tbody><tr><td>string s1;</td><td>s1 为空字符串</td></tr><tr><td>string s2(“ABC”);</td><td>s2 初始值为 “ABC”</td></tr><tr><td>string s3 = s2; string s3(s2);</td><td>s3 初始化为 s2 的一个副本</td></tr><tr><td>string s4(n, ‘c’ );</td><td>s4 初始化为字符 ‘c’ 的 n 个副本</td></tr></tbody></table></li><li><p>常用操作</p><table><thead><tr><th>操作</th><th>解释</th></tr></thead><tbody><tr><td>s.empty()</td><td>判断 s 是否为空，如果 s 为空返回 true，否则返回 false</td></tr><tr><td>s.size()</td><td>返回 s 中字符的个数，和 s.length() 功能相同</td></tr><tr><td>s[n]</td><td>返回 s 中位置 n 的字符，位置从0开始。切记不要越界</td></tr><tr><td>s1 + s2</td><td>将 s1 和 s2 连接成新字符串，返回新字符串</td></tr><tr><td>s1 = s2</td><td>赋值，将 s2 内容赋值给 s1</td></tr><tr><td>s1 == s2</td><td>判断相等，相等返回 true，否则返回 false</td></tr><tr><td>s1 != s2</td><td>判断不等，不等返回 true，否则返回 false</td></tr><tr><td>s.c_str()</td><td>返回 char*，和 s.data() 功能相同</td></tr><tr><td>stoi()</td><td>字符串转 int，还有 stol()，stoll()</td></tr><tr><td>stof()</td><td>字符串转 float, 还有 stod()，stold()</td></tr></tbody></table></li></ul><h4 id="示例代码3"><a href="#示例代码3" class="headerlink" title="示例代码3"></a>示例代码3</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// string 初始化</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    string s1;</span><br><span class="line">    string s2 = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    <span class="function">string <span class="title">s3</span><span class="params">(<span class="string">&quot;world&quot;</span>)</span></span>;</span><br><span class="line">    string s4 = s1 + s2;</span><br><span class="line">    string s5 = <span class="string">&quot;hello &quot;</span> + s2;</span><br><span class="line">    string s6 = <span class="string">&quot;hello &quot;</span> + s2 + <span class="string">&quot;world&quot;</span>;</span><br><span class="line">    <span class="function">string <span class="title">s7</span><span class="params">(<span class="number">5</span>, <span class="string">&#x27;c&#x27;</span>)</span></span>; </span><br><span class="line">    string s8 = <span class="string">&quot;hello&quot;</span> + <span class="string">&quot; world&quot;</span> <span class="comment">// Error </span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="示例代码4"><a href="#示例代码4" class="headerlink" title="示例代码4"></a>示例代码4</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 初始化</span></span><br><span class="line">    string s1 = <span class="string">&quot;hello&quot;</span>; </span><br><span class="line">    string s2 = <span class="string">&quot;this is shiyanlou.&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// size() 和 length() 都是返回字符串的长度</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s1.size() = &quot;</span> &lt;&lt; s1.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s1.length() = &quot;</span> &lt;&lt; s1.<span class="built_in">length</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 需要注意 capacity() 是返回 string 的当前容量，string 本身是一个数组，所以 capacity() 返回的长度可能会大于 size() 或者 length() 返回的长度</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s1.capacity() = &quot;</span> &lt;&lt; s1.<span class="built_in">capacity</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// s1.at(i) 和 s1[i] 都是访问位置 i 的字符</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s1.at(1) = &quot;</span> &lt;&lt; s1.<span class="built_in">at</span>(<span class="number">1</span>) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s1[1] = &quot;</span> &lt;&lt; s1[<span class="number">1</span>] &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// find() 查到字符，找到返回字符串位置，否则返回 -1</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s1.find(&#x27;e&#x27;) = &quot;</span> &lt;&lt; s1.<span class="built_in">find</span>(<span class="string">&#x27;e&#x27;</span>) &lt;&lt; endl;</span><br><span class="line">    <span class="comment">// 指定起始位置查到</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s2.find(\&quot;is\&quot;, 4) = &quot;</span> &lt;&lt; s2.<span class="built_in">find</span>(<span class="string">&quot;is&quot;</span>, <span class="number">4</span>) &lt;&lt; endl;</span><br><span class="line">    <span class="comment">// 逆序查找</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;s2.rfind(\&quot;is\&quot;) = &quot;</span> &lt;&lt; s2.<span class="built_in">rfind</span>(<span class="string">&quot;is&quot;</span>) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断字符串是否为空</span></span><br><span class="line">    <span class="keyword">if</span> (s1.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;s1 is empty.&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;s1 is not empty.&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断字符串是否相等</span></span><br><span class="line">    <span class="keyword">if</span> (s1 == <span class="string">&quot;hello&quot;</span>) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;s1 == hello&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;s1 != hello&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// string --&gt; int </span></span><br><span class="line">    string s3 = <span class="string">&quot;1314&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;stoi(s3) = &quot;</span> &lt;&lt; <span class="built_in">stoi</span>(s3) &lt;&lt; endl;</span><br><span class="line">    <span class="comment">// string --&gt; float</span></span><br><span class="line">    string s4 = <span class="string">&quot;3.1415&quot;</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;stof(s4) = &quot;</span> &lt;&lt; <span class="built_in">stof</span>(s4) &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实验操作2"><a href="#实验操作2" class="headerlink" title="实验操作2"></a>实验操作2</h3><p>实验要求：</p><ol><li><p>在 /home/project/ 目录下创建一个 useString.cpp 文件。</p></li><li><p>尝试根据代码示例编写程序。</p></li><li><p>编写完并且保存文件。</p></li><li><p>编译并查看是否有错误信息：g++ useString.cpp -o useString -std=c++11。</p></li><li><p>运行程序：./useString。</p><h4 id="实验代码："><a href="#实验代码：" class="headerlink" title="实验代码："></a>实验代码：</h4><p>见示例代码3和4</p><h2 id="内联函数"><a href="#内联函数" class="headerlink" title="内联函数"></a>内联函数</h2><p>官方定义：内联函数又是称作 “在线函数” 或者 “编译时期展开函数” 的一种编程语言结构，用来建议编译器对一些特殊函数进行内联扩展；也就是说建议编译器将制定的函数体插入并取代每一次调用该函数的地方，从而节省每次调用函数带来的额外时间开支。</p></li><li><p>定义内联函数关键字：inline。</p></li><li><p>内联分为普通内联函数和类内联函数。</p></li><li><p>定义内联函数时一般使用于简单的函数，如果函数比较复杂，编译器也将自动取消内联。</p><h3 id="示例代码-5-普通内联函数"><a href="#示例代码-5-普通内联函数" class="headerlink" title="示例代码 5 普通内联函数"></a>示例代码 5 普通内联函数</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a &gt; b ? a : b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">min</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a &gt; b ? b : a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">5</span>, b = <span class="number">7</span>;</span><br><span class="line">    <span class="comment">// 普通函数求最大值</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;max(a, b) = &quot;</span> &lt;&lt; <span class="built_in">max</span>(a, b) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 内联函数求最小值</span></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;min(a, b) = &quot;</span> &lt;&lt; <span class="built_in">min</span>(a, b) &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="编译过程"><a href="#编译过程" class="headerlink" title="编译过程"></a>编译过程</h3><p>在编译过程中，将替换min(a,b)为a &gt; b ? b : a 。而非像max一样调用函数体执行 a &gt; b ? a : b 。</p><h3 id="类内联函数"><a href="#类内联函数" class="headerlink" title="类内联函数"></a>类内联函数</h3><p>使用类内定义的成员函数编译器会默认将成员函数当做为内联函数进行编译。但如果成员函数比较复杂，编译器也不会将成员函数当做内联函数进行编译。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="comment">// 访问限制符 - 公有属性</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Student</span>() &#123;&#125;    <span class="comment">// 构造函数</span></span><br><span class="line">    ~<span class="built_in">Student</span>() &#123;&#125;    <span class="comment">// 析构函数</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 成员函数</span></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(string name)</span> </span>&#123; <span class="keyword">this</span>-&gt;name = name; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> string <span class="title">getName</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> name; &#125;;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123; <span class="keyword">this</span>-&gt;age = age; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> age; &#125;</span><br><span class="line"><span class="comment">// 访问限制符 - 私有属性</span></span><br><span class="line"><span class="keyword">private</span>: </span><br><span class="line">    <span class="comment">// 数据成员</span></span><br><span class="line">    string name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="实验操作-3"><a href="#实验操作-3" class="headerlink" title="实验操作 3"></a>实验操作 3</h4><p>实验要求：</p></li><li><p>在 /home/project/ 目录下创建一个 classInline.cpp 文件。</p></li><li><p>尝试根据代码示例编写程序。</p></li><li><p>编写完并且保存文件。</p></li><li><p>编译并查看是否有错误信息：g++ classInline.cpp -o classInline -std=c++11。</p></li><li><p>运行程序并查看输出信息：./classInline。</p><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4></li><li><p>编译器在编译时会将内联函数直接插入到调用内联函数处，这样可以减去调用函数时的开销。</p></li><li><p>在实际开发过程中，可以酌情考虑使用类内定义的方法实现类成员函数。</p><h2 id="类的定义与实例化"><a href="#类的定义与实例化" class="headerlink" title="类的定义与实例化"></a>类的定义与实例化</h2></li></ol><ul><li>类内定义。</li><li>类外定义。<ul><li>同文件类外定义。</li><li>分文件类外定义。</li></ul></li></ul><p>在实际开发过程中需要考虑到程序的架构问题，类内定义适用于一个相对比较简单的程序，考虑到开发时的方便性和时间成本，类外定义是实际程序开发中常用的方法。</p><h4 id="示例代码6"><a href="#示例代码6" class="headerlink" title="示例代码6"></a>示例代码6</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Student</span>() &#123;&#125;</span><br><span class="line">    ~<span class="built_in">Student</span>() &#123;&#125;</span><br><span class="line">    <span class="comment">// 定义成员函数并实现功能</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setName</span><span class="params">(string name)</span> </span>&#123; <span class="keyword">this</span>-&gt;name = name; &#125;</span><br><span class="line">    <span class="function">string <span class="title">getName</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> name; &#125;;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123; <span class="keyword">this</span>-&gt;age = age; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> age; &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    string name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Student stu;</span><br><span class="line">    stu.<span class="built_in">setName</span>(<span class="string">&quot;jake&quot;</span>);</span><br><span class="line">    stu.<span class="built_in">setAge</span>(<span class="number">15</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;My name is &quot;</span> &lt;&lt; stu.<span class="built_in">getName</span>() &lt;&lt; <span class="string">&quot;, I&#x27;m &quot;</span> &lt;&lt; stu.<span class="built_in">getAge</span>() &lt;&lt; <span class="string">&quot; years old.&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类内定义即在类中实现成员函数。在以上示例代码中，类中定义的成员函数都是使用的类内定义的方式实现的，在实际的开发中不建议这样做，除非是定义一个非常简单的类或者成员函数。<br>在内联函数小节中提到过，类内定义的方式编译器会自动尝试将成员函数作为内联函数进行编译，如果成员函数比较复杂，编译器将不会作为内联函数进行编译。</p><h3 id="类外定义"><a href="#类外定义" class="headerlink" title="类外定义"></a>类外定义</h3><p>类外定义有两种方式：</p><ol><li><p>同文件类外定义。</p></li><li><p>分文件类外定义。</p><h4 id="示例代码-7-同文件类外定义"><a href="#示例代码-7-同文件类外定义" class="headerlink" title="示例代码 7 同文件类外定义"></a>示例代码 7 同文件类外定义</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Student</span>();</span><br><span class="line">    ~<span class="built_in">Student</span>();</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setName</span><span class="params">(string name)</span></span>; </span><br><span class="line">    <span class="function">string <span class="title">getName</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    string name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Student::<span class="built_in">Student</span>()</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Student::~<span class="built_in">Student</span>()</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Student::setName</span><span class="params">(string name)</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    <span class="keyword">this</span>-&gt;name = name; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">string <span class="title">Student::getName</span><span class="params">()</span> <span class="keyword">const</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    <span class="keyword">return</span> name; </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Student::setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    <span class="keyword">this</span>-&gt;age = age; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Student::getAge</span><span class="params">()</span> <span class="keyword">const</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    <span class="keyword">return</span> age; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Student stu;</span><br><span class="line">    stu.<span class="built_in">setName</span>(<span class="string">&quot;jake&quot;</span>);</span><br><span class="line">    stu.<span class="built_in">setAge</span>(<span class="number">15</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;My name is &quot;</span> &lt;&lt; stu.<span class="built_in">getName</span>() &lt;&lt; <span class="string">&quot;, I&#x27;m &quot;</span> &lt;&lt; stu.<span class="built_in">getAge</span>() &lt;&lt; <span class="string">&quot; years old.&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="实验操作-4"><a href="#实验操作-4" class="headerlink" title="实验操作 4"></a>实验操作 4</h4><p>实验要求：</p></li><li><p>在 /home/project/ 目录下创建一个 sameFileOutClass.cpp 文件。</p></li><li><p>尝试根据代码示例编写程序。</p></li><li><p>编写完并且保存文件。</p></li><li><p>编译并查看是否有错误信息：g++ sameFileOutClass.cpp -o sameFileOutClass -std=c++11。</p></li><li><p>运行程序并查看输出信息：./sameFileOutClass。</p><h4 id="示例代码8-分文件类外定义"><a href="#示例代码8-分文件类外定义" class="headerlink" title="示例代码8 分文件类外定义"></a>示例代码8 分文件类外定义</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Student.h 文件</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> __STUDENT__</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __STUDENT__</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Student</span>();</span><br><span class="line">    ~<span class="built_in">Student</span>();</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setName</span><span class="params">(string name)</span></span>; </span><br><span class="line">    <span class="function">string <span class="title">getName</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    string name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// __STUDENT__</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Student.cpp 文件</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;Student.h&quot;</span>    <span class="comment">// 记得添加类头文件</span></span></span><br><span class="line"></span><br><span class="line">Student::<span class="built_in">Student</span>()</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Student::~<span class="built_in">Student</span>()</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Student::setName</span><span class="params">(string name)</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    <span class="keyword">this</span>-&gt;name = name; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">string <span class="title">Student::getName</span><span class="params">()</span> <span class="keyword">const</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    <span class="keyword">return</span> name; </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Student::setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    <span class="keyword">this</span>-&gt;age = age; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Student::getAge</span><span class="params">()</span> <span class="keyword">const</span> </span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">    <span class="keyword">return</span> age; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.cpp 文件</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;Student.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Student stu;</span><br><span class="line">    stu.<span class="built_in">setName</span>(<span class="string">&quot;jake&quot;</span>);</span><br><span class="line">    stu.<span class="built_in">setAge</span>(<span class="number">15</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;My name is &quot;</span> &lt;&lt; stu.<span class="built_in">getName</span>() &lt;&lt; <span class="string">&quot;, I&#x27;m &quot;</span> &lt;&lt; stu.<span class="built_in">getAge</span>() &lt;&lt; <span class="string">&quot; years old.&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="实验操作-5"><a href="#实验操作-5" class="headerlink" title="实验操作 5"></a>实验操作 5</h4><p>实验要求：</p></li><li><p>在 /home/project/ 目录下创建 Student.h、Student.cpp、main.cpp 文件。</p></li><li><p>尝试根据代码示例编写程序。</p></li><li><p>编写完并且保存文件。</p></li><li><p>编译并查看是否有错误信息：g++ main.cpp Student.cpp -o main -std=c++11。</p></li><li><p>运行程序并查看输出信息：./main。</p><h4 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h4><p>同文件类外定义就是将类的成员函数定义在类之外的地方，同时类的成员函数使用类作用域来进行定义。在实际项目开发中，类不是很复杂时可以使用该方法，类比较复杂时不推荐使用。<br>分文件定义类就是将类的定义放在 xxx.h 头文件中，而类的成员函数实现放在 xxx.cpp 文件中。这种做法是做项目时推荐使用的方法，因为这样将类的定义和成员函数分开后，在开发时很容易能够查找到对应的定义和成员函数。<br>一般情况下文件名和类名相同，便于开发时类管理。</p><h3 id="知识点总结"><a href="#知识点总结" class="headerlink" title="知识点总结"></a>知识点总结</h3></li></ol><ul><li>深入认识类与对象并讲解 C++ 相关概念。</li><li>如何使用 string 类。</li><li>普通内联函数与类内联函数以及编译器对内联函数的处理。</li><li>学习类内定义与类外定义，开发时常使用分文件类外定义的方法。</li><li>main 函数的返回值为 int 类型，注意不要写成 void 类型。<h4 id="章节总结"><a href="#章节总结" class="headerlink" title="章节总结"></a>章节总结</h4>本章节讲解的是比较基础的知识点，但是在开发中却非常的重要，在接下来的章节中将会越来越深的学习 C++ 知识。<br>希望在本章节结束后能掌握如何定义和使用类，并且掌握在工作中的实际用法。<h4 id="实验答案"><a href="#实验答案" class="headerlink" title="实验答案"></a>实验答案</h4></li></ul><ol><li>做完实验 1 后对类的定义与使用有了进一步的认识，实验 1 最后输出对象的 name 和 age 值。</li><li>实验 2 针对 string 类做练习。</li><li>实验 3 针对内联函数的使用进行练习并总结注意事项。</li><li>实验 4 针对类内定义成员函数做练习。</li><li>实验 5 针对分文件类外定义练习。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;封装&quot;&gt;&lt;a href=&quot;#封装&quot; class=&quot;headerlink&quot; title=&quot;封装&quot;&gt;&lt;/a&gt;封装&lt;/h1&gt;&lt;h1 id=&quot;Section01-封装&quot;&gt;&lt;a href=&quot;#Section01-封装&quot; class=&quot;headerlink&quot; title=&quot;S</summary>
      
    
    
    
    <category term="Coding" scheme="http://example.com/categories/Coding/"/>
    
    
    <category term="Cpp" scheme="http://example.com/tags/Cpp/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2022/01/06/hello-world/"/>
    <id>http://example.com/2022/01/06/hello-world/</id>
    <published>2022-01-06T03:57:48.249Z</published>
    <updated>2022-01-06T03:57:48.249Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
